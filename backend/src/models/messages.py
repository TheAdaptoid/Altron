import json
from collections.abc import Mapping
from datetime import datetime
from enum import Enum

from pydantic import BaseModel, Field

type SERIALIZABLE = (
    int | float | str | bool | None | list["SERIALIZABLE"] | dict[str, "SERIALIZABLE"]
)


class MessageRole(str, Enum):
    """The role of the originator of a message.

    This enum defines the roles that can be assigned to a message in a conversation.
    - USER: Represents a message sent by the user.
    - AGENT: Represents a message sent by the AI assistant.
    """

    USER = "user"
    AGENT = "assistant"


class ToolRequest(BaseModel):
    """A request to use a tool.

    This class represents a request to use a specific tool,
    which includes the tool's identifier, name, and the arguments to pass to the tool.

    Attributes:
        id (str): The unique identifier for the tool request.
        name (str): The name of the tool to be used.
        arguments (Mapping[str, SERIALIZABLE]): The arguments to pass to the tool,
            stored as a dictionary.
    """

    id: str = Field(
        ...,
        description="The unique identifier for the tool request.",
        frozen=True,
    )
    name: str = Field(
        ...,
        description="The name of the tool to be used.",
        frozen=True,
    )
    arguments: Mapping[str, SERIALIZABLE] = Field(
        ...,
        description="The arguments to pass to the tool, stored as a dictionary.",
        frozen=True,
    )


class ToolResponse(BaseModel):
    """A response from a tool.

    This class represents a response generated by a tool,
    which includes the tool's identifier, name, and the content of the response.

    Attributes:
        id (str): The unique identifier for the tool response.
        name (str): The name of the tool that generated the response.
        content (SERIALIZABLE): The content of the tool response,
            stored as a JSON string.
    """

    id: str = Field(
        ...,
        description="The unique identifier for the tool response.",
        frozen=True,
    )
    name: str = Field(
        ...,
        description="The name of the tool that generated the response.",
        frozen=True,
    )
    content: SERIALIZABLE = Field(
        ...,
        description="The content of the tool response, stored as a JSON string.",
        frozen=True,
    )

    def to_json_string(self) -> str:
        """Convert the content to a JSON string.

        Returns:
            str: The content serialized as a JSON string.
        """
        return json.dumps(self.content)


class Message(BaseModel):
    """A message in a conversation.

    This class represents a message in a conversation,
    which can be sent by either the user or the agent.
    It includes the role of the message originator,
    a timestamp, and the content of the message.

    Attributes:
        role (MessageRole): The role of the message originator (user or agent).
        timestamp (str): The timestamp of when the message was created,
            in ISO 8601 format.
        content (str): The content of the message.
    """

    role: MessageRole = Field(
        ...,
        description="The role of the message originator.",
        frozen=True,
    )
    timestamp: str = Field(
        default_factory=lambda: datetime.now().isoformat(),
        description="The timestamp of when the message was created.",
        frozen=True,
    )
    content: str | None = Field(
        default=None,
        description="The content of the message.",
    )


class UserMessage(Message):
    """A message sent by the user.

    This class represents a message sent by the user in a conversation.
    It includes the role of the message originator, which is set to 'user',
    and a list of tool responses associated with the user message.

    Attributes:
        role (MessageRole): The role of the message originator, set to 'user'.
        tool_responses (list[ToolResponse]):
            A list of tool responses associated with the user message.
    """

    role: MessageRole = Field(
        default=MessageRole.USER,
        description="The role of the message originator, set to 'user'.",
        frozen=True,
    )
    tool_responses: list[ToolResponse] = Field(
        default_factory=list[ToolResponse],
        description="A list of tool responses associated with the user message.",
        frozen=True,
    )


class AgentMessage(Message):
    """A message sent by the agent (AI assistant).

    This class represents a message sent by the AI assistant in a conversation.
    It includes the role of the message originator, which is set to 'assistant',
    and additional attributes for reasoning content and tool requests.

    Attributes:
        role (MessageRole): The role of the message originator, set to 'assistant'.
        reasoning_content (str | None): The reasoning content of the agent message,
            if applicable.
        tool_requests (list[ToolRequest]):
            A list of tool requests associated with the agent message.
    """

    role: MessageRole = Field(
        default=MessageRole.AGENT,
        description="The role of the message originator, set to 'assistant'.",
    )
    reasoning_content: str | None = Field(
        default=None,
        description="The reasoning content of the agent message, if applicable.",
    )
    tool_requests: list[ToolRequest] = Field(
        default_factory=list[ToolRequest],
        description="A list of tool requests associated with the agent message.",
    )


class MessageThread(BaseModel):
    """A thread of messages in a conversation."""

    title: str = Field(
        default="New Thread",
        description="The title of the message thread.",
    )
    messages: list[Message] = Field(
        default_factory=list[Message],
        description="The messages in the thread.",
    )
    modified_at: str = Field(
        default_factory=lambda: datetime.now().isoformat(),
        description="The timestamp of when the thread was last modified.",
    )
